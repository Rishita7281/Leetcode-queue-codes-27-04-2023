MAX SUM SUBARRAY OF SIZE K
class Solution:
    def maximumSumSubarray (self,K,Arr,N):
        # code here
        ans=0
        s=0
        start=0
        end=0
        while(end<len(Arr)):
            s+=Arr[end]
            if(end-start+1==K):
                ans=max(ans,s)
                s-=Arr[start]
                start+=1
            end+=1
        return ans
        
        
        
FIRST NEGATIVE INTEGER IN EVERY WINDOW OF SIZE K
#include <bits/stdc++.h>
using namespace std;
void findFirstNegIntWindowK(int arr[], int n, int k){
   deque<int> windowKsize;
   int i = 0;
   for (; i < k; i++)
      if (arr[i] < 0)
         windowKsize.push_back(i);
   for (; i < n; i++){
      if (!windowKsize.empty())
         cout<<arr[windowKsize.front()]<<"\t";
      else
         cout<<"0\t";
         while ( (!windowKsize.empty()) && windowKsize.front() < (i - k + 1))
           windowKsize.pop_front();
         if (arr[i] < 0)
            windowKsize.push_back(i);
   }
   if (!windowKsize.empty())
      cout<<arr[windowKsize.front()]<<" \t";
   else
      cout<<"0\t";
}
int main(){
   int arr[] = {-2, 2, -1, 4, 3, -6};
   int n = sizeof(arr)/sizeof(arr[0]);
   int k = 2;
   cout<<"First negative integer in each with of size "<<k<<" is \n";
   findFirstNegIntWindowK(arr, n, k);
   return 0;}
   
   
COUNT OCCURENCES OF ANAGRAMS
class Solution{
public:
	
	    int search(string pat, string txt) {
	    // code her
	    int i = 0, j = 0;
	    int k = pat.length();
	    unordered_map <char,int> mp;
	    
	    for(auto it:pat){
	        mp[it]++;
	    }
	    
	    int count = mp.size();
	    int ans = 0;
	    
	    while(j < txt.length()){
	        if(mp.find(txt[j]) != mp.end()){
	            mp[txt[j]]--;
	            if(mp[txt[j]]==0) count--;
	        }
	        
	        if(j-i+1 < k){
	            j++;
	        }
	        else if(j-i+1 == k){
	            if(count == 0){
	                ans++;
	            }
	            
	            if(mp.find(txt[i]) != mp.end()){
	                mp[txt[i]]++;
	                if(mp[txt[i]] == 1) count++;
	            }
	            
	            j++;
	            i++;
	        }
	    }
	    return ans;

	}

};
