//Design a circular queue
class MyCircularQueue {
int *data;
int frontIndex;
int nextIndex;
int size;
int capacity;
public:
MyCircularQueue(int s) {
data = new int[s];
frontIndex = -1;
nextIndex = 0;
size = 0;
capacity = s;
}

bool isFull() {
    return size == capacity;
}

bool isEmpty() {
    return size == 0;
}

bool enQueue(int element) {
    if (isFull()) {
         return 0;
    }

    data[nextIndex] = element;
    nextIndex = (nextIndex + 1) % capacity;
    if (frontIndex == -1) {
        frontIndex = 0;
    }
    size++;
    return 1;
}

int Front() {
    if (isEmpty())
        return -1;

    return data[frontIndex];
}

int Rear() {
    if (isEmpty())
        return -1;

  int index = (nextIndex - 1 + capacity)%capacity;
  return data[index];
}    

bool deQueue() {
    if (isEmpty())
        return 0;

    frontIndex = (frontIndex + 1) % capacity;
    size--;
    
    return 1;
}
};
//Design a dequeue
class MyCircularDeque {
public:
    int *a;
    int n;
    int front,rear;
    MyCircularDeque(int k) {
        a = new int[k];
        n = k;
        front = rear = -1;
    }
    
    bool insertFront(int value) {
        if ((rear + 1) % n == front)
            return false;
        if (front == -1)
            front = rear = 0;
        else if (front == 0)
            front = n - 1;
        else
            front--;
        a[front] = value;
        return true;
    }
    
    bool insertLast(int value) {
        if ((rear + 1) % n == front)
            return false;
        if (rear == -1)
            front = rear = 0;
        else
            rear = (rear + 1) % n;
        a[rear] = value;
        return true;
    }
    
    bool deleteFront() {
        if (front == -1)
            return false;
        if (front == rear)
            front = rear = -1;
        else
            front = (front + 1) % n;
        return true;
    }
    
    bool deleteLast() {
        if (rear == -1)
            return false;
        if (front == rear)
            front = rear = -1;
        else if (rear == 0)
            rear = n - 1;
        else
            rear--;
        return true;
    }
    
    int getFront() {
        if (front == -1)
            return -1;
        return a[front];
    }
    
    int getRear() {
        if (rear == -1)
            return -1;
        return a[rear];
    }
    
    bool isEmpty() {
        return front == -1;
    }
    
    bool isFull() {
        return ((rear+1)%n) == front;
    }
};
